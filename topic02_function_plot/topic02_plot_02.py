# Matplotlib - Функция plot для построения и оформления двумерных графиков
import matplotlib
import matplotlib.pyplot as plt
import numpy as np


def main():
    # Начнем изучение пакета matplotlib с наиболее часто используемой функции
    # plot(). На предыдущем занятии мы с ее помощью построили простой двумерный
    # график:
    # print(matplotlib.get_backend())  # module://backend_interagg
    matplotlib.use('TkAgg')
    plt.plot([1, 2, -6, 0, 4])
    plt.show()

    # Также обратите внимание, что мы обращаемся к ветке matplotlib.pyplot для
    # вызова этой функции. В целом, именно модуль pyplot отвечает за
    # отображение разных графиков – это «рабочая лошадка» пакета matplotlib.

    # Давайте первым делом разберемся, что на вход принимает эта функция и что
    # она, фактически, делает. В нашей программе мы передаем ей обычный список
    # языка Python. В действительности же, все входные данные должны
    # соответствовать массивам пакета numpy, то есть, иметь тип:
    #
    # numpy.array
    y = np.array([1, 2, -6, 0, 4])

    # А, затем, передать его функции plot():
    plt.plot(y)
    plt.show()

    # Визуально, результат будет тем же. Вообще, почти все функции пакета
    # matplotlib работают именно с массивами numpy: принимают их в качестве
    # аргументов или возвращают. Поэтому при работе с matplotlib желательно
    # знать основы numpy.

    # Итак, указывая всего один аргумент в функции plot() он интерпретируется
    # как множество точек по ординате (координате Oy). Соответственно,
    # координата x формируется автоматически как индексы элементов массива y:
    #
    # ------------------------------------------------------------------------
    #  x:       |   0   |   1   |   2   |   3   |   4
    # ------------------------------------------------------------------------
    #  y:       |   1   |   2   |  -6   |   0   |   4
    # ------------------------------------------------------------------------


if __name__ == '__main__':
    main()
