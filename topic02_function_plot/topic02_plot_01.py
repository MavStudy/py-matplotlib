# Так как matplotlib выводит графическую информацию, как правило, на экран
# устройства, то он должен использовать пакет для работы с пользовательским
# интерфейсом.
# Мы будем пока использовать стандартный модуль TkInter, чтобы не усложнять
# наши программы.
import matplotlib
import matplotlib.pyplot as plt


def main():
    # Архитектура окна графики
    print(matplotlib.get_backend())  # module://backend_interagg

    matplotlib.use('TkAgg')
    # В данном случае указан пакет TkAgg для отображения графической
    # информации. Также backend можно «жестко» прописать в файле конфигурации
    # пакета matplotlib, чтобы каждый раз в программе не вызывать функцию
    # use().

    # Давайте теперь сформируем простой график и отобразим его в окне. Для
    # этого нам нужно импортировать специальный модуль pyplot пакета
    # matplotlib:
    plt.plot([1, 2, -6, 0, 4])

    # В принципе, этого достаточно, чтобы график был сформирован и отображен.
    # Но при работе в интегрированных средах, вроде PyCharm, окно с графиком
    # тут же закроется. Чтобы этого не происходило, добавим вызов еще одной
    # функции:
    plt.show()

    # Теперь мы видим окно с графиком и элементами управления. Программа
    # продолжит свою работу только после закрытия этого окна.


if __name__ == '__main__':
    main()
# Поддерживаются следующие backend'ы
# -----------------------------------------------------------------------------
#  Название         |  Описание
# -----------------------------------------------------------------------------
#  Qt5Agg           | Рендеринг графики в Qt5 (требуется PyQt5). В IPython
#                   | активируется командой %matplotlib qt5
# -----------------------------------------------------------------------------
#  ipympl           | Рендеринг графики в в виджете Jupyter (требуется ipympl).
#                   | В IPython активируется командой %matplotlib ipympl
# -----------------------------------------------------------------------------
#  GTK3Agg          | Рендеринг графики в GTK 3.x (требуется PyGObject и
#                   | pycairo или cairocffi). В IPython активируется командой
#                   | %matplotlib gtk3
# -----------------------------------------------------------------------------
#  macosx           | Рендеринг графики в Cocoa. В IPython активируется
#                   | командой %matplotlib osx
# -----------------------------------------------------------------------------
#  TkAgg            | Рендеринг графики в Tk (требуется TkInter). В IPython
#                   | активируется командой %matplotlib tk
# -----------------------------------------------------------------------------
#  nbAgg            | Рендеринг графики в Jupyter notebook. В Jupyter
#                   | активируется командой %matplotlib notebook
# -----------------------------------------------------------------------------
#  WebAgg           | Для использования с торнадо-сервером
# -----------------------------------------------------------------------------
#  GTK3Cairo        | Cairo рендеринг графики в GTK 3.xx (требуется PyGObject
#                   | и pycairo или cairocffi)
# -----------------------------------------------------------------------------
#  Qt4Agg           | Рендеринг графики в Qt4 (требуется PyQt4 или pyside).
#                   | В IPython активируется командой %matplotlib qt4
# -----------------------------------------------------------------------------
#  wxAgg            | Рендеринг графики в wxWidgets (требуется wxPython 4).
#                   | В IPython активируется командой %matplotlib wx
# -----------------------------------------------------------------------------
